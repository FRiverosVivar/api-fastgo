#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fastgo-api:server');
var http = require('http');
const socket_io = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



const io = socket_io(server, 
  { 
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
}
  )
  // io.on('connection', (socket) => {  console.log('a user connected');});

const namespaces = io.of(/^[/][a-f\d]{24}$/i);
// const namespaces = io.of('6003954d641d9944eace4806');

namespaces.on('connection', function(socket) {
  console.log("alguien se conecto")
  console.log("id socket:", socket.id)
  const namespace = socket.nsp;
  console.log("namespace"), namespace
  socket.emit('message', `Conectado exitosamente a solicitud id: ${namespace.name}`);

  socket.on('message', function(data) {
    console.log('Un mensaje ha sido recibido desde un cliente: ', data);
    console.log('Cliente:', socket.id)
    console.log('namespace', namespace)
    // try {
    //   // console.log("try")
    //   UserRealTime.findOneAndUpdate({User: namespace.name.toString().substring(1)}, {GPS: [data.lat, data.lng]},{upsert: true, new: true, setDefaultsOnInsert: true}, (err, result)=>{
    //     // console.log("err, result", err, result)
    //   })
    // } catch (error) {
    //   console.log("catch")
    //   console.log(error)
    // }
    socket.broadcast.emit('message', data);
  });

  socket.on('disconnect', function(reason) {
    console.log("desconexion:", socket.id)
    console.log("razon:", reason)
  })
});